package Main;

import java.util.concurrent.Semaphore;


class Filosofo extends Thread {
    private Semaphore garfoEsquerda, garfoDireita; 
    private int id; 

  
    public Filosofo(int id, Semaphore garfoEsquerda, Semaphore garfoDireita) {
        this.id = id;
        this.garfoEsquerda = garfoEsquerda;
        this.garfoDireita = garfoDireita;
    }

    
    public void run() {
        while (true) {
            pensar(); 
            try {
                garfoEsquerda.acquire();
                garfoDireita.acquire(); 
                comer(); 
                garfoEsquerda.release(); 
                garfoDireita.release(); 
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }

    
    private void pensar() {
        System.out.println("Fil칩sofo " + id + " est치 pensando.");
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    
    private void comer() {
        System.out.println("Fil칩sofo " + id + " est치 comendo.");
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}


public class JantarDosFilosofos {
    public static void main(String[] args) {
        int numFilosofos = 5; 
        Semaphore[] garfos = new Semaphore[numFilosofos]; 
        Filosofo[] filosofos = new Filosofo[numFilosofos]; 
        for (int i = 0; i < numFilosofos; i++) {
            garfos[i] = new Semaphore(1); 
        }

        for (int i = 0; i < numFilosofos; i++) {
            int garfoEsquerdaIndex = i;
            int garfoDireitaIndex = (i + 1) % numFilosofos;
            filosofos[i] = new Filosofo(i, garfos[garfoEsquerdaIndex], garfos[garfoDireitaIndex]); 
            filosofos[i].start(); 
        }
    }
}
